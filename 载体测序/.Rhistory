a
gRNA
{
# human或mouse或mice或rat
if(grepl("human | mouse | mice | rat",content,ignore.case = TRUE)){
gRNA<-unlist(str_extract_all(content,"[ACGTUacgtu\\s]{15,}"))
gRNA<-gRNA[which(nchar(gRNA)>=15 & nchar(gRNA)<=30)]
if(length(gRNA)!=0){
for(i in 1:length(gRNA)){
#找到gRNA所在段落,
p_num<-grep(gRNA[i],paragraph)
if(length(p_num)==0){
print("不在段落里")
next
}
p_text<-paragraph[p_num]
# gRNA序列前面不能出现的词
del_word<-c("siRNA","shRNA","forward","reverse","Fwd","Rev","primer","primers","F1","R1","F2","R2","PCR")
#找到gRNA所在位置
gRNA_pos<-regexpr(gRNA[i],p_text)
a<-sapply(del_word, function(word) grepl(word,substring(p_text,gRNA_pos-200,gRNA_pos),ignore.case = TRUE))
# 没有出现屏蔽词则为gRNA序列
if(all(a==FALSE)){
#然后从斜体字中找到基因名
em <- allSourceCodes[[p_num]] %>%
html_nodes("em")
ita_name<-html_text(em)
ita_table<-data.frame()
for(j in 1:length(ita_name)){
ita_table[j,1]<-ita_name[j]
ita_table[j,2]<-regexpr(ita_name[j],p_text)
}
gene_name<-ita_table[which.min(gRNA_pos-ita_table[which(gRNA_pos>ita_table[,2]),2]),1]
if(length(gene_name)!=0){
gRNA.table[k,1]<-gene_name
}
gRNA.table[k,2]<-gRNA[i]
gRNA.table[k,3]<-url
k<-k+1
}
else{
gRNA.table[k,2]<-"other seq"
gRNA.table[k,3]<-url
k<-k+1
}
}
}
else{
gRNA.table[k,2]<-"no gRNA"
gRNA.table[k,3]<-url
k<-k+1
}
}
else{
gRNA.table[k,2]<-"species wrong"
gRNA.table[k,3]<-url
k<-k+1
}
}
gRNA.table
library("rvest")
library("stringr")
library(httr)
IMUFE_url<-read.csv("C://Users//41518//Desktop//url.csv")$url
gRNA.table<-data.frame(gene=character(),gRNA=character(),pubmed=character())
k<-1
url<-IMUFE_url[17]
r<-RETRY("GET",url)
allSourceCode<-content(r)
allSourceCode <- allSourceCode %>%
html_node("div[class=jig-ncbiinpagenav]")
#全文
content <- allSourceCode %>%
html_text()
#所有段落
allSourceCodes <- allSourceCode %>%
html_nodes("p")
paragraph <- allSourceCodes %>%
html_text()
{
# human或mouse或mice或rat
if(grepl("human | mouse | mice | rat",content,ignore.case = TRUE)){
gRNA<-unlist(str_extract_all(content,"[ACGTUacgtu\\s]{15,}"))
gRNA<-gRNA[which(nchar(gRNA)>=15 & nchar(gRNA)<=30)]
if(length(gRNA)!=0){
for(i in 1:length(gRNA)){
#找到gRNA所在段落,
p_num<-grep(gRNA[i],paragraph)
if(length(p_num)==0){
print("不在段落里")
next
}
p_text<-paragraph[p_num]
# gRNA序列前面不能出现的词
del_word<-c("siRNA","shRNA","forward","reverse","Fwd","Rev","primer","primers","F1","R1","F2","R2","PCR")
#找到gRNA所在位置
gRNA_pos<-regexpr(gRNA[i],p_text)
a<-sapply(del_word, function(word) grepl(word,substring(p_text,gRNA_pos-200,gRNA_pos),ignore.case = TRUE))
# 没有出现屏蔽词则为gRNA序列
if(all(a==FALSE)){
#然后从斜体字中找到基因名
em <- allSourceCodes[[p_num]] %>%
html_nodes("em")
ita_name<-html_text(em)
ita_table<-data.frame()
for(j in 1:length(ita_name)){
ita_table[j,1]<-ita_name[j]
ita_table[j,2]<-regexpr(ita_name[j],p_text)
}
gene_name<-ita_table[which.min(gRNA_pos-ita_table[which(gRNA_pos>ita_table[,2]),2]),1]
if(length(gene_name)!=0){
gRNA.table[k,1]<-gene_name
}
gRNA.table[k,2]<-gRNA[i]
gRNA.table[k,3]<-url
k<-k+1
}
else{
gRNA.table[k,2]<-"other seq"
gRNA.table[k,3]<-url
k<-k+1
}
}
}
else{
gRNA.table[k,2]<-"no gRNA"
gRNA.table[k,3]<-url
k<-k+1
}
}
else{
gRNA.table[k,2]<-"species wrong"
gRNA.table[k,3]<-url
k<-k+1
}
}
# #标题
# content_title <- allSourceCode %>%
#   html_node("h1[class=content-title]")
# title <- allSourceCode %>%
#   html_text()
stop_for_status(r)
gRNA.table
library("rvest")
library("stringr")
library(httr)
IMUFE_url<-read.csv("C://Users//41518//Desktop//url.csv")$url
gRNA.table<-data.frame(gene=character(),gRNA=character(),pubmed=character())
k<-1
url<-IMUFE_url[18]
r<-RETRY("GET",url)
allSourceCode<-content(r)
allSourceCode <- allSourceCode %>%
html_node("div[class=jig-ncbiinpagenav]")
#全文
content <- allSourceCode %>%
html_text()
#所有段落
allSourceCodes <- allSourceCode %>%
html_nodes("p")
paragraph <- allSourceCodes %>%
html_text()
{
# human或mouse或mice或rat
if(grepl("human | mouse | mice | rat",content,ignore.case = TRUE)){
gRNA<-unlist(str_extract_all(content,"[ACGTUacgtu\\s]{15,}"))
gRNA<-gRNA[which(nchar(gRNA)>=15 & nchar(gRNA)<=30)]
if(length(gRNA)!=0){
for(i in 1:length(gRNA)){
#找到gRNA所在段落,
p_num<-grep(gRNA[i],paragraph)
if(length(p_num)==0){
print("不在段落里")
next
}
p_text<-paragraph[p_num]
# gRNA序列前面不能出现的词
del_word<-c("siRNA","shRNA","forward","reverse","Fwd","Rev","primer","primers","F1","R1","F2","R2","PCR")
#找到gRNA所在位置
gRNA_pos<-regexpr(gRNA[i],p_text)
a<-sapply(del_word, function(word) grepl(word,substring(p_text,gRNA_pos-200,gRNA_pos),ignore.case = TRUE))
# 没有出现屏蔽词则为gRNA序列
if(all(a==FALSE)){
#然后从斜体字中找到基因名
em <- allSourceCodes[[p_num]] %>%
html_nodes("em")
ita_name<-html_text(em)
ita_table<-data.frame()
for(j in 1:length(ita_name)){
ita_table[j,1]<-ita_name[j]
ita_table[j,2]<-regexpr(ita_name[j],p_text)
}
gene_name<-ita_table[which.min(gRNA_pos-ita_table[which(gRNA_pos>ita_table[,2]),2]),1]
if(length(gene_name)!=0){
gRNA.table[k,1]<-gene_name
}
gRNA.table[k,2]<-gRNA[i]
gRNA.table[k,3]<-url
k<-k+1
}
else{
gRNA.table[k,2]<-"other seq"
gRNA.table[k,3]<-url
k<-k+1
}
}
}
else{
gRNA.table[k,2]<-"no gRNA"
gRNA.table[k,3]<-url
k<-k+1
}
}
else{
gRNA.table[k,2]<-"species wrong"
gRNA.table[k,3]<-url
k<-k+1
}
}
# #标题
# content_title <- allSourceCode %>%
#   html_node("h1[class=content-title]")
# title <- allSourceCode %>%
#   html_text()
stop_for_status(r)
gRNA.table
gRNA
content
gRNA
split(contene,"\n")
split(content,"\n")
str_split(content,"\n")
unlist(str_split(content,"\n"))
gRNA.table
gRNA.table
gsub("\n",".",content)
library("rvest")
library("stringr")
library(httr)
IMUFE_url<-read.csv("C://Users//41518//Desktop//url.csv")$url
gRNA.table<-data.frame(gene=character(),gRNA=character(),pubmed=character())
k<-1
url<-IMUFE_url[19]
r<-RETRY("GET",url)
allSourceCode<-content(r)
allSourceCode <- allSourceCode %>%
html_node("div[class=jig-ncbiinpagenav]")
#全文
content <- allSourceCode %>%
html_text()
gsub("\n",".",content)
#所有段落
allSourceCodes <- allSourceCode %>%
html_nodes("p")
paragraph <- allSourceCodes %>%
html_text()
{
# human或mouse或mice或rat
if(grepl("human | mouse | mice | rat",content,ignore.case = TRUE)){
gRNA<-unlist(str_extract_all(content,"[ACGTUacgtu\\s]{15,}"))
gRNA<-gRNA[which(nchar(gRNA)>=15 & nchar(gRNA)<=30)]
if(length(gRNA)!=0){
for(i in 1:length(gRNA)){
#找到gRNA所在段落,
p_num<-grep(gRNA[i],paragraph)
if(length(p_num)==0){
print("不在段落里")
next
}
p_text<-paragraph[p_num]
# gRNA序列前面不能出现的词
del_word<-c("siRNA","shRNA","forward","reverse","Fwd","Rev","primer","primers","F1","R1","F2","R2","PCR")
#找到gRNA所在位置
gRNA_pos<-regexpr(gRNA[i],p_text)
a<-sapply(del_word, function(word) grepl(word,substring(p_text,gRNA_pos-200,gRNA_pos),ignore.case = TRUE))
# 没有出现屏蔽词则为gRNA序列
if(all(a==FALSE)){
#然后从斜体字中找到基因名
em <- allSourceCodes[[p_num]] %>%
html_nodes("em")
ita_name<-html_text(em)
ita_table<-data.frame()
for(j in 1:length(ita_name)){
ita_table[j,1]<-ita_name[j]
ita_table[j,2]<-regexpr(ita_name[j],p_text)
}
gene_name<-ita_table[which.min(gRNA_pos-ita_table[which(gRNA_pos>ita_table[,2]),2]),1]
if(length(gene_name)!=0){
gRNA.table[k,1]<-gene_name
}
gRNA.table[k,2]<-gRNA[i]
gRNA.table[k,3]<-url
k<-k+1
}
else{
gRNA.table[k,2]<-"other seq"
gRNA.table[k,3]<-url
k<-k+1
}
}
}
else{
gRNA.table[k,2]<-"no gRNA"
gRNA.table[k,3]<-url
k<-k+1
}
}
else{
gRNA.table[k,2]<-"species wrong"
gRNA.table[k,3]<-url
k<-k+1
}
}
# #标题
# content_title <- allSourceCode %>%
#   html_node("h1[class=content-title]")
# title <- allSourceCode %>%
#   html_text()
stop_for_status(r)
gRNA
url
library(stringr)
library(Biostrings)
gene.table<-read.csv("C://Users/41518/Desktop/micro.csv")
for(m in 11530:24529){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
if(length(aa)!=0){
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
if(nrow(analysis_pos)>1){
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
}
print(m)
}
write.csv(gene.table,"C://Users/41518/Desktop/micro2.csv")
View(gene.table)
write.csv(gene.table,"C://Users/41518/Desktop/micro2.csv")
for(m in 22428:24529){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
if(length(aa)!=0){
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
if(nrow(analysis_pos)>1){
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
}
print(m)
}
write.csv(gene.table,"C://Users/41518/Desktop/micro2.csv")
for(m in 153:800){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
if(length(aa)!=0){
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
if(nrow(analysis_pos)>1){
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
}
print(m)
}
write.csv(gene.table,"C://Users/41518/Desktop/micro2.csv")
filepath1<-'C://Users/41518/Desktop/载体/载体测序结果/合格/YSH-LV001-hREST[shRNA1]/P201217-01-A05-S175.ab1'
filepath2<-'C://Users/41518/Desktop/载体/载体测序结果/合格/YSH-LV001-hREST[shRNA1]/YSH-LV001-hREST[shRNA1].dna'
#读入ab1文件和dna文件
info1 = readsangerseq(filepath1)
info= read.abif(filepath1)
library(sangerseqR)
library(Biostrings)
setwd("C://Users/41518/Desktop/work/Ubigene/载体测序/")
#读入ab1文件和dna文件
info1 = readsangerseq(filepath1)
info= read.abif(filepath1)
View(info)
16/7
13-2.2
42*5
220
220
23*5+4
210+220+220+119
filepath1<-'C://Users/41518/Desktop/ICE/run_exprisement(1)/CK19-004-Npnt/PK200908-02-A05-PK593.ab1'
info= read.abif(filepath1)
#从ab1文件获取质量分数
score<-info@data[["PCON.1"]]
score
score[1:30]
mean(score[1:30])
mean(score[2:31])
