}
}
}
View(analysis_pos)
pos_start
m
i
m=1
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
View(analysis_pos)
pos
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
print(pos)
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
print(pos)
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
View(analysis_pos)
analysis_pos$X225L
c(pos_start[j],pos_end[j])
analysis_pos <- data.frame(start=numeric(),end=numeric())
View(analysis_pos)
len <- nchar(analysis_seq) - 9
View(analysis_pos)
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
print(pos)
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
View(analysis_pos)
duplicated.data.frame(analysis_pos[,1])
duplicated(analysis_pos[,1])
View(analysis_pos)
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,1])]
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,1]),]
View(analysis_pos)
palindromeLeftArm(aa)
rbind(analysis_pos,palindromeLeftArm(aa))
rbind(analysis_pos,c(start(palindromeLeftArm(aa)),end(palindromeLeftArm(aa))))
c(start(palindromeLeftArm(aa)),end(palindromeLeftArm(aa)))
sapply(aa, function(x) rbind(analysis_pos,c(start(palindromeLeftArm(x)),end(palindromeLeftArm(x)))))
analysis_pos
sapply(aa, function(x) print(c(start(palindromeLeftArm(x)),end(palindromeLeftArm(x)))))
sapply(aa, function(x) c(start(palindromeLeftArm(x)),end(palindromeLeftArm(x))))
palindromeLeftArm(aa)
c(start(palindromeLeftArm(aa)),end(palindromeLeftArm(aa)))
aa
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
print(pos)
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,1]),]
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
for(l in 1:length(aa)){
rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
View(analysis_pos)
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
View(analysis_pos)
duplicated.data.frame(analysis_pos)
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
duplicated.data.frame(analysis_pos)
View(analysis_pos)
#去重复
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
View(analysis_pos)
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
View(analysis_pos)
analysis_pos<-rbind(analysis_pos,c(244,250),c(244,269))
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,]$start>=analysis_pos[i,]$start & analysis_pos[j,]$start<=analysis_pos[i,]$end){
if(analysis_pos[j,]$end>analysis_pos[i,]$end){
analysis_pos[i,]$end<-analysis_pos[j,]$end
}
else{
analysis_pos[j,]$end<-analysis_pos[i,]$end
}
}
else{
next
}
}
}
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
View(analysis_pos)
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
View(analysis_pos)
gene.table$r_start<-character(36714)
gene.table$r_end<-character(36714)
paste(analysis_pos$start,collapse = ";")
paste(analysis_pos[,1],collapse = ";")
paste(analysis_pos[,2],collapse = ";")
for(m in 1:36714){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_start<-paste(analysis_pos[,2],collapse = ";")
print(m)
}
gene.table$r_start
View(analysis_pos)
View(gene.table)
for(m in 1:36714){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
print(m)
}
View(gene.table)
m=2
analysis_seq<-gene.table[m,]$analysis_seq
analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
analysis_pos
for(m in 1:36714){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
print(m)
}
aa
len
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
analysis_seq
aa
length(aa)
View(gene.table)
#发夹结构
for(m in 153:6400){
seq<-DNAString(gene.table[m,]$analysis_seq)
hairpin<-findPalindromes(seq,min.armlength = 4,max.looplength = 17)
bb<-data.frame(start=start(hairpin),end=end(hairpin))
bb<-bb[order(bb$start),]
for(i in 1:nrow(bb)){
for(j in 1:nrow(bb)){
if(bb[j,]$start>=bb[i,]$start & bb[j,]$start<=bb[i,]$end){
if(bb[j,]$end>bb[i,]$end){
bb[i,]$end<-bb[j,]$end
}
else{
bb[j,]$end<-bb[i,]$end
}
}
else{
next
}
}
}
bb<-bb[!duplicated(bb$end),]
gene.table[m,]$h_start<-paste(bb$start,collapse = ";")
gene.table[m,]$h_end<-paste(bb$end,collapse = ";")
print(m)
}
for(m in 1529:11529){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
if(length(aa)!=0){
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
print(m)
}
write.csv(gene.table,"C://Users/41518/Desktop/micro1.csv")
for(m in 2389:11529){
analysis_seq<-gene.table[m,]$analysis_seq
analysis_pos <- data.frame(start=numeric(),end=numeric())
len <- nchar(analysis_seq) - 9
for (i in 1:len) {
#正向重复
pattern <- substring(analysis_seq, i, i + 9)
pos <- matchPattern(pattern, analysis_seq)
pos_start <- start(pos)
pos_end <- end(pos)
if(length(pos)>1){
for (j in 1:length(pos_start)){
if(pos_start[j]!=i){
analysis_pos<-rbind(analysis_pos,c(pos_start[j],pos_end[j]))
}
}
}
}
#反向重复
aa=findPalindromes(DNAString(analysis_seq),min.armlength = 10,max.looplength = len)
if(length(aa)!=0){
for(l in 1:length(aa)){
analysis_pos<-rbind(analysis_pos,c(start(palindromeLeftArm(aa[l])),end(palindromeLeftArm(aa[l]))))
analysis_pos<-rbind(analysis_pos,c(start(palindromeRightArm(aa[l])),end(palindromeRightArm(aa[l]))))
}
}
#去重复,排序
analysis_pos<-analysis_pos[!duplicated.data.frame(analysis_pos),]
analysis_pos<-analysis_pos[order(analysis_pos[,1],analysis_pos[,2]),]
if(nrow(analysis_pos)>1){
#合并
for(i in 1:nrow(analysis_pos)){
for(j in 1:nrow(analysis_pos)){
if(analysis_pos[j,1]>=analysis_pos[i,1] & analysis_pos[j,1]<=analysis_pos[i,2]){
if(analysis_pos[j,2]>analysis_pos[i,2]){
analysis_pos[i,2]<-analysis_pos[j,2]
}
else{
analysis_pos[j,2]<-analysis_pos[i,2]
}
}
else{
next
}
}
}
analysis_pos<-analysis_pos[!duplicated(analysis_pos[,2]),]
gene.table[m,]$r_start<-paste(analysis_pos[,1],collapse = ";")
gene.table[m,]$r_end<-paste(analysis_pos[,2],collapse = ";")
}
print(m)
}
write.csv(gene.table,"C://Users/41518/Desktop/micro1.csv")
